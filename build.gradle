buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: "forge"

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

group = "com.pahimar.ee3"
version = config.mod_version
archivesBaseName = "EquivalentExchange3"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    assetDir = "run/assets"

    replaceIn "lib/Reference.java"
    if (project.hasProperty("ee3_signature"))
        replace "@FINGERPRINT@", project.ee3_signature
}

version = "${config.minecraft_version}-${config.mod_version}.${System.getenv().BUILD_NUMBER}"

processResources {
    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'version.properties'

        // replaces
        expand 'version': project.config.mod_version, 'buildnumber': "${System.getenv().BUILD_NUMBER}"
    }

    // copy everything else, thats we didnt do before
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'version.properties'
    }
}

// BEYOND THIS POINT.. 
// IS STUFF THATS FOR RELEASING...

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore stuff
    ext.keystore_location = "."

if (!project.hasProperty("ee3_keystore_alias")) // keystore stuff
    ext.ee3_keystore_alias = ""

if (!project.hasProperty("keystore_password")) // keystore stuff
    ext.keystore_password = ""

if (!project.hasProperty("ee3_release_loc")) // release loc
    ext.ee3_release_loc = "."
else
    ext.ee3_release_loc = ee3_release_loc.replace('{MC}', minecraft.version).replace('{MODVER}', config.mod_version).replace('{BUILD}', "${System.getenv().BUILD_NUMBER}")

task signJar(dependsOn: "reobf") {
    inputs.file jar.getArchivePath()
    inputs.file keystore_location
    inputs.property "ee3_keystore_alias", ee3_keystore_alias
    inputs.property "keystore_password", keystore_password
    outputs.file jar.getArchivePath()

    // only sign if the keystore exists
    onlyIf {
        return keystore_location != "."
    }

    // the actual action.. sign the jar.
    doLast {
        ant.signjar(
                destDir: jar.destinationDir,
                jar: jar.getArchivePath(),
                keystore: keystore_location,
                alias: ee3_keystore_alias,
                storepass: keystore_password
        )
    }
}

task release(type: Copy) {
    dependsOn "signJar"

    from project.tasks.jar.destinationDir
    into project.file(project.ee3_release_loc)

    eachFile { file ->
        logger.info "copying ${file}"
    }

    // only if the release location isn't empty.
    onlyIf {
        return project.ee3_release_loc != "."
    }
}
